//------------------------------------------------------------------------------
// <auto-generated>
//     Este codigo fue generado por una plantilla T4 de propiedad de Walter molano.
//     El cambio  de algunas lineas de codigo podran causar comportamientos
//     inesperados de la aplicacion.  Abril 24 de 2012.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 
using System;
using System.Collections.Generic;
using System.Linq;
using Applications.MainModule.Admin.IServices;
using Applications.MainModule.Admin.Resources;
using Domain.MainModules.Entities;
using Domain.Core.Specification;
using Domain.MainModule.Contracts;

namespace Applications.MainModule.Admin.Services
{
    public class SfTBL_Admin_ModulosManagementServices : ISfTBL_Admin_ModulosManagementServices
    {

         #region Fields
         readonly ITBL_Admin_ModulosRepository _tblAdminModulosRepository;
         #endregion

         #region Constructor
         /// <summary>
         /// Constructor de la Calse 
         /// </summary>
         public SfTBL_Admin_ModulosManagementServices( ITBL_Admin_ModulosRepository tblAdminModulosRepository)
         {
            if (tblAdminModulosRepository == null)
                throw new ArgumentNullException("tblAdminModulosRepository");
            _tblAdminModulosRepository = tblAdminModulosRepository;
         }
         #endregion

         #region Members
         /// <summary>
         /// Crea una nueva instancia de la entidad 
         /// </summary>
         public TBL_Admin_Modulos NewEntity()
         {
            return new TBL_Admin_Modulos();
         }

         /// <summary>
         /// Inserta un nuevo registro en la Base de Datos.
         /// </summary>
         public void Add(TBL_Admin_Modulos entity)
         {
            //Begin unit of work ( if Transaction is required init here a new TransactionScope element
            var unitOfWork = _tblAdminModulosRepository.UnitOfWork;
            _tblAdminModulosRepository.Add(entity);
            //Complete changes in this unit of work
            unitOfWork.Commit();
         }

          /// <summary>
          /// Actualiza el registro en la Base de Datos.
          /// </summary>
         public void Modify(TBL_Admin_Modulos entity)
         {
            if (entity == null)
                throw new ArgumentNullException(string.Format("Modificar : El objeto esta nulo."));

            var unitOfWork = _tblAdminModulosRepository.UnitOfWork;
            _tblAdminModulosRepository.Modify(entity);
            unitOfWork.CommitAndRefreshChanges();
         }

          /// <summary>
          /// Elimina el registro en la Base de Datos.
          /// </summary>
         public void Remove(TBL_Admin_Modulos entity)
         {
            if (entity == null)
                throw new ArgumentNullException(string.Format("Eliminar : El objeto esta nulo."));

            //Begin unit of work ( if Transaction is required init here a new TransactionScope element
            var unitOfWork = _tblAdminModulosRepository.UnitOfWork;

            _tblAdminModulosRepository.Remove(entity);

            //Complete changes in this unit of work
            unitOfWork.CommitAndRefreshChanges();
         }

          /// <summary>
          /// Obtiene una Ãºnica entidad filtrada por ID.
          /// </summary>
         public TBL_Admin_Modulos FindById(int id)
         {
            if (id == 0)
                throw new ArgumentNullException(string.Format("Busqueda por Id : El parametro es nulo."));

            Specification<TBL_Admin_Modulos> specification = new DirectSpecification<TBL_Admin_Modulos>(u => u.IdModulo == id);

            return _tblAdminModulosRepository.GetEntityBySpec(specification);
           
         }

       
          /// <summary>
          /// Obtiene el listado de entidades activas.
          /// </summary>
         public List<TBL_Admin_Modulos> FindBySpec(bool isActive)
         {
            Specification<TBL_Admin_Modulos> specification = new DirectSpecification<TBL_Admin_Modulos>(u => u.IsActive == isActive);
            return _tblAdminModulosRepository.GetBySpec(specification).ToList();
         }

          /// <summary>
          /// Obtiene el listado de entidades activas y paginadas.
          /// </summary>
         public List<TBL_Admin_Modulos> FindPaged(int pageIndex, int pageCount)
         {
            if (pageIndex < 0)
                throw new ArgumentException(Messages.exception_InvalidPageIndex, "pageIndex");

            if (pageCount <= 0)
                throw new ArgumentException(Messages.exception_InvalidPageCount, "pageCount");


            Specification<TBL_Admin_Modulos> onlyEnabledSpec = new DirectSpecification<TBL_Admin_Modulos>(u => u.IsActive);

            return _tblAdminModulosRepository.GetPagedElements(pageIndex, pageCount, u => u.IdModulo, onlyEnabledSpec, true).ToList();
         }

         public TBL_Admin_Modulos GetModuleById(int id)
         {
             if (id == 0)
                 throw new ArgumentNullException(string.Format("Busqueda por Id : El parametro es nulo."));

             Specification<TBL_Admin_Modulos> specification = new DirectSpecification<TBL_Admin_Modulos>(u => u.IdModulo == id);

             return _tblAdminModulosRepository.FindModuleBySpec(specification);

         }

         #endregion

         #region IDisposable Members

        /// <summary>
        /// Release all resources
        /// </summary>
        public void Dispose()
        {
            //release used unit of work
            //if you have many repositories but  lifetime is per resolve only need
            //dispose one

            if (_tblAdminModulosRepository != null)
            {
                _tblAdminModulosRepository.UnitOfWork.Dispose();
            }
        }

        #endregion
    }
}
    