//------------------------------------------------------------------------------
// <auto-generated>
//     Este codigo fue generado por el motor de generacion de codigo de propiedad de Walter molano.
//     El cambio  de algunas lineas de codigo podran causar comportamientos
//     inesperados de la aplicacion.  junio 18 de 2014.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 
using System;
using System.Collections.Generic;
using System.Linq;
using Applications.MainModule.Admin.IServices;
using Domain.MainModules.Entities;
using Domain.Core.Specification;
using Domain.MainModule.Contracts;
using Infrastructure.CrossCutting.NetFramework.Enums;

namespace Applications.MainModule.Admin.Services
{
    public class SfTBL_Admin_SeccionesManagementServices : ISfTBL_Admin_SeccionesManagementServices
    {

         #region Fields
         readonly ITBL_Admin_SeccionesRepository _tblAdminSeccionesRepository;
         #endregion

         #region Constructor
         /// <summary>
         /// Constructor de la Calse 
         /// </summary>
         public SfTBL_Admin_SeccionesManagementServices( ITBL_Admin_SeccionesRepository tblAdminSeccionesRepository)
         {
            if (tblAdminSeccionesRepository == null)
                throw new ArgumentNullException("tblAdminSeccionesRepository");
            _tblAdminSeccionesRepository = tblAdminSeccionesRepository;
         }
         #endregion

         #region Members
         /// <summary>
         /// Crea una nueva instancia de la entidad 
         /// </summary>
         public TBL_Admin_Secciones NewEntity()
         {
            return new TBL_Admin_Secciones();
         }

         /// <summary>
         /// Inserta un nuevo registro en la Base de Datos.
         /// </summary>
         public void Add(TBL_Admin_Secciones entity)
         {
            //Begin unit of work ( if Transaction is required init here a new TransactionScope element
            var unitOfWork = _tblAdminSeccionesRepository.UnitOfWork;
            _tblAdminSeccionesRepository.Add(entity);
            //Complete changes in this unit of work
            unitOfWork.Commit();
         }

          /// <summary>
          /// Actualiza el registro en la Base de Datos.
          /// </summary>
         public void Modify(TBL_Admin_Secciones entity)
         {
            if (entity == null)
                throw new ArgumentNullException(string.Format("Modificar : El objeto esta nulo."));

            var unitOfWork = _tblAdminSeccionesRepository.UnitOfWork;
            _tblAdminSeccionesRepository.Modify(entity);
            unitOfWork.CommitAndRefreshChanges();
         }

          /// <summary>
          /// Elimina el registro en la Base de Datos.
          /// </summary>
         public void Remove(TBL_Admin_Secciones entity)
         {
            if (entity == null)
                throw new ArgumentNullException(string.Format("Eliminar : El objeto esta nulo."));

            //Begin unit of work ( if Transaction is required init here a new TransactionScope element
            var unitOfWork = _tblAdminSeccionesRepository.UnitOfWork;

            _tblAdminSeccionesRepository.Remove(entity);

            //Complete changes in this unit of work
            unitOfWork.CommitAndRefreshChanges();
         }

          /// <summary>
          /// Obtiene una Ãºnica entidad filtrada por ID.
          /// </summary>
         public TBL_Admin_Secciones FindById(int id)
         {
            if (id == 0)
                throw new ArgumentNullException(string.Format("Busqueda por Id : El parametro es nulo."));

            Specification<TBL_Admin_Secciones> specification = new DirectSpecification<TBL_Admin_Secciones>(u => u.IdSeccion == id);

            return _tblAdminSeccionesRepository.GetEntityBySpec(specification);
           
         }

		 /*
         public TBL_Admin_Secciones FindById(string id)
         {
             if (string.IsNullOrEmpty(id))
                 throw new ArgumentNullException(string.Format("Busqueda por Id : El parametro es nulo."));

              Specification<TBL_Admin_Secciones> specification = new DirectSpecification<TBL_Admin_Secciones>(u => u.Code == id);

            return _TBLAdminSeccionesRepository.GetEntityBySpec(specification);
         }
		 */

		

          /// <summary>
          /// Obtiene el listado de entidades activas.
          /// </summary>
         public List<TBL_Admin_Secciones> FindBySpec(bool isActive)
         {
            Specification<TBL_Admin_Secciones> specification = new DirectSpecification<TBL_Admin_Secciones>(u => u.IsActive == isActive);
            return _tblAdminSeccionesRepository.GetBySpec(specification).ToList();
         }

          /// <summary>
          /// Obtiene el listado de entidades activas y paginadas.
          /// </summary>
         public List<TBL_Admin_Secciones> FindPaged(int pageIndex, int pageCount)
         {
            if (pageIndex < 0)
                throw new ArgumentException(Resources.Messages.exception_InvalidPageIndex, "pageIndex");

            if (pageCount <= 0)
                throw new ArgumentException(Resources.Messages.exception_InvalidPageCount, "pageCount");


            Specification<TBL_Admin_Secciones> onlyEnabledSpec = new DirectSpecification<TBL_Admin_Secciones>(u => u.IsActive);

            return _tblAdminSeccionesRepository.GetPagedElements(pageIndex, pageCount, u => u.IdSeccion, onlyEnabledSpec, true).ToList();
         }


         public IEnumerable<TBL_Admin_Secciones> ListadoSeccionesPorModulo(ModulosAplicacion idModulo)
         {
             var id = (int) idModulo;
             Specification<TBL_Admin_Secciones> specification = new DirectSpecification<TBL_Admin_Secciones>(u => u.IdModule == id);
             return _tblAdminSeccionesRepository.GetBySpec(specification).OrderBy(x => x.Posicion).ToList();
         }

         public IEnumerable<TBL_Admin_Secciones> ListadoSeccionesPorModulo(int idModulo)
         {
             Specification<TBL_Admin_Secciones> specification = new DirectSpecification<TBL_Admin_Secciones>(u => u.IdModule == idModulo);
             return _tblAdminSeccionesRepository.GetBySpec(specification).OrderBy(x => x.Posicion).ToList();
         }

         #endregion

         #region IDisposable Members

        /// <summary>
        /// Release all resources
        /// </summary>
        public void Dispose()
        {
            //release used unit of work
            //if you have many repositories but  lifetime is per resolve only need
            //dispose one

            if (_tblAdminSeccionesRepository != null)
            {
                _tblAdminSeccionesRepository.UnitOfWork.Dispose();
            }
        }

        #endregion
    }
}
    