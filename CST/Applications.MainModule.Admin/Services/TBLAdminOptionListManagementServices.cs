//------------------------------------------------------------------------------
// <auto-generated>
//     Este codigo fue generado por una plantilla T4 de propiedad de Walter molano.
//     El cambio  de algunas lineas de codigo podran causar comportamientos
//     inesperados de la aplicacion.  Abril 24 de 2012.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 
using System;
using System.Collections.Generic;
using System.Linq;
using Applications.MainModule.Admin.IServices;
using Applications.MainModule.Admin.Resources;
using Domain.MainModules.Entities;
using Domain.Core.Specification;
using Domain.MainModule.Contracts;

namespace Applications.MainModule.Admin.Services
{
    public class SfTBL_Admin_OptionListManagementServices : ISfTBL_Admin_OptionListManagementServices
    {

         #region Fields
         readonly ITBL_Admin_OptionListRepository _tblAdminOptionListRepository;
         #endregion

         #region Constructor
         /// <summary>
         /// Constructor de la Calse 
         /// </summary>
         public SfTBL_Admin_OptionListManagementServices( ITBL_Admin_OptionListRepository tblAdminOptionListRepository)
         {
            if (tblAdminOptionListRepository == null)
                throw new ArgumentNullException("tblAdminOptionListRepository");
            _tblAdminOptionListRepository = tblAdminOptionListRepository;
         }
         #endregion

         #region Members
         /// <summary>
         /// Crea una nueva instancia de la entidad 
         /// </summary>
         public TBL_Admin_OptionList NewEntity()
         {
            return new TBL_Admin_OptionList();
         }

         /// <summary>
         /// Inserta un nuevo registro en la Base de Datos.
         /// </summary>
         public void Add(TBL_Admin_OptionList entity)
         {
            //Begin unit of work ( if Transaction is required init here a new TransactionScope element
            var unitOfWork = _tblAdminOptionListRepository.UnitOfWork;
            _tblAdminOptionListRepository.Add(entity);
            //Complete changes in this unit of work
            unitOfWork.Commit();
         }

          /// <summary>
          /// Actualiza el registro en la Base de Datos.
          /// </summary>
         public void Modify(TBL_Admin_OptionList entity)
         {
            if (entity == null)
                throw new ArgumentNullException(string.Format("Modificar : El objeto esta nulo."));

            var unitOfWork = _tblAdminOptionListRepository.UnitOfWork;
            _tblAdminOptionListRepository.Modify(entity);
            unitOfWork.CommitAndRefreshChanges();
         }

          /// <summary>
          /// Elimina el registro en la Base de Datos.
          /// </summary>
         public void Remove(TBL_Admin_OptionList entity)
         {
            if (entity == null)
                throw new ArgumentNullException(string.Format("Eliminar : El objeto esta nulo."));

            //Begin unit of work ( if Transaction is required init here a new TransactionScope element
            var unitOfWork = _tblAdminOptionListRepository.UnitOfWork;

            _tblAdminOptionListRepository.Remove(entity);

            //Complete changes in this unit of work
            unitOfWork.CommitAndRefreshChanges();
         }

          /// <summary>
          /// Obtiene una Ãºnica entidad filtrada por ID.
          /// </summary>
         public TBL_Admin_OptionList FindById(int id)
         {
            if (id == 0)
                throw new ArgumentNullException(string.Format("Busqueda por Id : El parametro es nulo."));

            Specification<TBL_Admin_OptionList> specification = new DirectSpecification<TBL_Admin_OptionList>(u => u.IdOpcion == id);

            return _tblAdminOptionListRepository.GetEntityBySpec(specification);
           
         }

      
          /// <summary>
          /// Obtiene el listado de entidades activas.
          /// </summary>
         public List<TBL_Admin_OptionList> FindBySpec(bool isActive)
         {
            Specification<TBL_Admin_OptionList> specification = new DirectSpecification<TBL_Admin_OptionList>(u => u.IsActive == isActive);
            return _tblAdminOptionListRepository.GetBySpec(specification).ToList();
         }

          /// <summary>
          /// Obtiene el listado de entidades activas y paginadas.
          /// </summary>
         public List<TBL_Admin_OptionList> FindPaged(int pageIndex, int pageCount)
         {
            if (pageIndex < 0)
                throw new ArgumentException(Messages.exception_InvalidPageIndex, "pageIndex");

            if (pageCount <= 0)
                throw new ArgumentException(Messages.exception_InvalidPageCount, "pageCount");


            Specification<TBL_Admin_OptionList> onlyEnabledSpec = new DirectSpecification<TBL_Admin_OptionList>(u => u.IdOpcion != null);

            return _tblAdminOptionListRepository.GetPagedElements(pageIndex, pageCount, u => u.IdOpcion, onlyEnabledSpec, true).ToList();
         }

         public List<TBL_Admin_OptionList> FindPaged(int pageIndex, int pageCount, string search)
         {
             if (pageIndex < 0)
                 throw new ArgumentException(Resources.Messages.exception_InvalidPageIndex, "pageIndex");

             if (pageCount <= 0)
                 throw new ArgumentException(Resources.Messages.exception_InvalidPageCount, "pageCount");


             if (!string.IsNullOrEmpty(search))
             {
                 Specification<TBL_Admin_OptionList> onlyEnabledSpec = new DirectSpecification<TBL_Admin_OptionList>
                    (u => 
                        (u.Key.Contains(search) ||
                        u.Value.Contains(search) ||
                        u.Descripcion.Contains(search))
                     && u.IsActive);


                 return _tblAdminOptionListRepository.GetPagedElements(pageIndex, pageCount, u => u.IdOpcion, onlyEnabledSpec, true).ToList();
             }
             else
             {
                 Specification<TBL_Admin_OptionList> onlyEnabledSpec = new DirectSpecification<TBL_Admin_OptionList>(u => u.IsActive);

                 return _tblAdminOptionListRepository.GetPagedElements(pageIndex, pageCount, u => u.IdOpcion,onlyEnabledSpec, true).ToList();
             }
         }

         public int CountByPaged(string search)
         {
             if (!string.IsNullOrEmpty(search))
             {

                 Specification<TBL_Admin_OptionList> onlyEnabledSpec = new DirectSpecification<TBL_Admin_OptionList>
                           (u =>
                               (u.Key.Contains(search) ||
                               u.Value.Contains(search) ||
                               u.Descripcion.Contains(search))
                               && u.IsActive);
                 return _tblAdminOptionListRepository.GetBySpec(onlyEnabledSpec).Count();
             }
             else
             {
                 Specification<TBL_Admin_OptionList> onlyEnabledSpec = new DirectSpecification<TBL_Admin_OptionList>(u => u.IsActive);

                 return _tblAdminOptionListRepository.GetBySpec(onlyEnabledSpec).Count();
             }
         }

         public TBL_Admin_OptionList ObtenerOpcionBykey(string key)
         {
             if (string.IsNullOrEmpty(key))
                 throw new ArgumentNullException(string.Format("Busqueda por Key : El parametro es nulo."));

             Specification<TBL_Admin_OptionList> specification = new DirectSpecification<TBL_Admin_OptionList>(u => u.Key.Equals(key));

             return _tblAdminOptionListRepository.GetEntityBySpec(specification);

         }

         public TBL_Admin_OptionList ObtenerOpcionBykeyModuleId(string key, int moduleId)
         {
             if (string.IsNullOrEmpty(key))
                 throw new ArgumentNullException(string.Format("Busqueda por Key : El parametro es nulo."));

             Specification<TBL_Admin_OptionList> specification = new DirectSpecification<TBL_Admin_OptionList>(u => u.Key.Equals(key) && u.IdModule == moduleId);

             return _tblAdminOptionListRepository.GetEntityBySpec(specification);
         }


         #endregion

         #region IDisposable Members

        /// <summary>
        /// Release all resources
        /// </summary>
        public void Dispose()
        {
            //release used unit of work
            //if you have many repositories but  lifetime is per resolve only need
            //dispose one

            if (_tblAdminOptionListRepository != null)
            {
                _tblAdminOptionListRepository.UnitOfWork.Dispose();
            }
        }

        #endregion       
    }
}
    