//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

using Domain.Core.Entities;

namespace Domain.MainModules.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Compromisos))]
    [KnownType(typeof(ManualAnh))]
    
    public partial class EntregablesANHCompromiso: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long IdCompromiso
        {
            get { return _idCompromiso; }
            set
            {
                if (_idCompromiso != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdCompromiso' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Compromisos != null && Compromisos.IdCompromiso != value)
                        {
                            Compromisos = null;
                        }
                    }
                    _idCompromiso = value;
                    OnPropertyChanged("IdCompromiso");
                }
            }
        }
        private long _idCompromiso;
    
        [DataMember]
        public string IdManualAnh
        {
            get { return _idManualAnh; }
            set
            {
                if (_idManualAnh != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdManualAnh' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ManualAnh != null && ManualAnh.IdManualAnh != value)
                        {
                            ManualAnh = null;
                        }
                    }
                    _idManualAnh = value;
                    OnPropertyChanged("IdManualAnh");
                }
            }
        }
        private string _idManualAnh;
    
        [DataMember]
        public byte Estado
        {
            get { return _estado; }
            set
            {
                if (_estado != value)
                {
                    _estado = value;
                    OnPropertyChanged("Estado");
                }
            }
        }
        private byte _estado;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Compromisos Compromisos
        {
            get { return _compromisos; }
            set
            {
                if (!ReferenceEquals(_compromisos, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (IdCompromiso != value.IdCompromiso)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _compromisos;
                    _compromisos = value;
                    FixupCompromisos(previousValue);
                    OnNavigationPropertyChanged("Compromisos");
                }
            }
        }
        private Compromisos _compromisos;
    
        [DataMember]
        public ManualAnh ManualAnh
        {
            get { return _manualAnh; }
            set
            {
                if (!ReferenceEquals(_manualAnh, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (IdManualAnh != value.IdManualAnh)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _manualAnh;
                    _manualAnh = value;
                    FixupManualAnh(previousValue);
                    OnNavigationPropertyChanged("ManualAnh");
                }
            }
        }
        private ManualAnh _manualAnh;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Compromisos = null;
            ManualAnh = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCompromisos(Compromisos previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.EntregablesANHCompromiso.Contains(this))
            {
                previousValue.EntregablesANHCompromiso.Remove(this);
            }
    
            if (Compromisos != null)
            {
                if (!Compromisos.EntregablesANHCompromiso.Contains(this))
                {
                    Compromisos.EntregablesANHCompromiso.Add(this);
                }
    
                IdCompromiso = Compromisos.IdCompromiso;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Compromisos")
                    && (ChangeTracker.OriginalValues["Compromisos"] == Compromisos))
                {
                    ChangeTracker.OriginalValues.Remove("Compromisos");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Compromisos", previousValue);
                }
                if (Compromisos != null && !Compromisos.ChangeTracker.ChangeTrackingEnabled)
                {
                    Compromisos.StartTracking();
                }
            }
        }
    
        private void FixupManualAnh(ManualAnh previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.EntregablesANHCompromiso.Contains(this))
            {
                previousValue.EntregablesANHCompromiso.Remove(this);
            }
    
            if (ManualAnh != null)
            {
                if (!ManualAnh.EntregablesANHCompromiso.Contains(this))
                {
                    ManualAnh.EntregablesANHCompromiso.Add(this);
                }
    
                IdManualAnh = ManualAnh.IdManualAnh;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ManualAnh")
                    && (ChangeTracker.OriginalValues["ManualAnh"] == ManualAnh))
                {
                    ChangeTracker.OriginalValues.Remove("ManualAnh");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ManualAnh", previousValue);
                }
                if (ManualAnh != null && !ManualAnh.ChangeTracker.ChangeTrackingEnabled)
                {
                    ManualAnh.StartTracking();
                }
            }
        }

        #endregion
    }
}
