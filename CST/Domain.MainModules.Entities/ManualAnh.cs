//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

using Domain.Core.Entities;

namespace Domain.MainModules.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(EntregablesANHCompromiso))]
    
    public partial class ManualAnh: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string IdManualAnh
        {
            get { return _idManualAnh; }
            set
            {
                if (_idManualAnh != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdManualAnh' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _idManualAnh = value;
                    OnPropertyChanged("IdManualAnh");
                }
            }
        }
        private string _idManualAnh;
    
        [DataMember]
        public string IdManualAnhPadre
        {
            get { return _idManualAnhPadre; }
            set
            {
                if (_idManualAnhPadre != value)
                {
                    _idManualAnhPadre = value;
                    OnPropertyChanged("IdManualAnhPadre");
                }
            }
        }
        private string _idManualAnhPadre;
    
        [DataMember]
        public short Orden
        {
            get { return _orden; }
            set
            {
                if (_orden != value)
                {
                    _orden = value;
                    OnPropertyChanged("Orden");
                }
            }
        }
        private short _orden;
    
        [DataMember]
        public short NumeroProducto
        {
            get { return _numeroProducto; }
            set
            {
                if (_numeroProducto != value)
                {
                    _numeroProducto = value;
                    OnPropertyChanged("NumeroProducto");
                }
            }
        }
        private short _numeroProducto;
    
        [DataMember]
        public string Producto
        {
            get { return _producto; }
            set
            {
                if (_producto != value)
                {
                    _producto = value;
                    OnPropertyChanged("Producto");
                }
            }
        }
        private string _producto;
    
        [DataMember]
        public string Contenido
        {
            get { return _contenido; }
            set
            {
                if (_contenido != value)
                {
                    _contenido = value;
                    OnPropertyChanged("Contenido");
                }
            }
        }
        private string _contenido;
    
        [DataMember]
        public string Formato
        {
            get { return _formato; }
            set
            {
                if (_formato != value)
                {
                    _formato = value;
                    OnPropertyChanged("Formato");
                }
            }
        }
        private string _formato;
    
        [DataMember]
        public string Medio
        {
            get { return _medio; }
            set
            {
                if (_medio != value)
                {
                    _medio = value;
                    OnPropertyChanged("Medio");
                }
            }
        }
        private string _medio;
    
        [DataMember]
        public string Entrega
        {
            get { return _entrega; }
            set
            {
                if (_entrega != value)
                {
                    _entrega = value;
                    OnPropertyChanged("Entrega");
                }
            }
        }
        private string _entrega;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<EntregablesANHCompromiso> EntregablesANHCompromiso
        {
            get
            {
                if (_entregablesANHCompromiso == null)
                {
                    _entregablesANHCompromiso = new TrackableCollection<EntregablesANHCompromiso>();
                    _entregablesANHCompromiso.CollectionChanged += FixupEntregablesANHCompromiso;
                }
                return _entregablesANHCompromiso;
            }
            set
            {
                if (!ReferenceEquals(_entregablesANHCompromiso, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_entregablesANHCompromiso != null)
                    {
                        _entregablesANHCompromiso.CollectionChanged -= FixupEntregablesANHCompromiso;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (EntregablesANHCompromiso item in _entregablesANHCompromiso)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _entregablesANHCompromiso = value;
                    if (_entregablesANHCompromiso != null)
                    {
                        _entregablesANHCompromiso.CollectionChanged += FixupEntregablesANHCompromiso;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (EntregablesANHCompromiso item in _entregablesANHCompromiso)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("EntregablesANHCompromiso");
                }
            }
        }
        private TrackableCollection<EntregablesANHCompromiso> _entregablesANHCompromiso;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            EntregablesANHCompromiso.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupEntregablesANHCompromiso(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (EntregablesANHCompromiso item in e.NewItems)
                {
                    item.ManualAnh = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("EntregablesANHCompromiso", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EntregablesANHCompromiso item in e.OldItems)
                {
                    if (ReferenceEquals(item.ManualAnh, this))
                    {
                        item.ManualAnh = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("EntregablesANHCompromiso", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
