//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

using Domain.Core.Entities;

namespace Domain.MainModules.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Parametros))]
    
    public partial class FormatosIndice: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public byte IdParametro
        {
            get { return _idParametro; }
            set
            {
                if (_idParametro != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdParametro' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Parametros != null && Parametros.IdParametro != value)
                        {
                            Parametros = null;
                        }
                    }
                    _idParametro = value;
                    OnPropertyChanged("IdParametro");
                }
            }
        }
        private byte _idParametro;
    
        [DataMember]
        public string NombreIndice
        {
            get { return _nombreIndice; }
            set
            {
                if (_nombreIndice != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'NombreIndice' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _nombreIndice = value;
                    OnPropertyChanged("NombreIndice");
                }
            }
        }
        private string _nombreIndice;
    
        [DataMember]
        public int TextAlign
        {
            get { return _textAlign; }
            set
            {
                if (_textAlign != value)
                {
                    _textAlign = value;
                    OnPropertyChanged("TextAlign");
                }
            }
        }
        private int _textAlign;
    
        [DataMember]
        public int CharacterCasing
        {
            get { return _characterCasing; }
            set
            {
                if (_characterCasing != value)
                {
                    _characterCasing = value;
                    OnPropertyChanged("CharacterCasing");
                }
            }
        }
        private int _characterCasing;
    
        [DataMember]
        public bool ValidateRequired
        {
            get { return _validateRequired; }
            set
            {
                if (_validateRequired != value)
                {
                    _validateRequired = value;
                    OnPropertyChanged("ValidateRequired");
                }
            }
        }
        private bool _validateRequired;
    
        [DataMember]
        public byte DataType
        {
            get { return _dataType; }
            set
            {
                if (_dataType != value)
                {
                    _dataType = value;
                    OnPropertyChanged("DataType");
                }
            }
        }
        private byte _dataType;
    
        [DataMember]
        public string Format
        {
            get { return _format; }
            set
            {
                if (_format != value)
                {
                    _format = value;
                    OnPropertyChanged("Format");
                }
            }
        }
        private string _format;
    
        [DataMember]
        public byte FormatBehavior
        {
            get { return _formatBehavior; }
            set
            {
                if (_formatBehavior != value)
                {
                    _formatBehavior = value;
                    OnPropertyChanged("FormatBehavior");
                }
            }
        }
        private byte _formatBehavior;
    
        [DataMember]
        public byte FormatOrientation
        {
            get { return _formatOrientation; }
            set
            {
                if (_formatOrientation != value)
                {
                    _formatOrientation = value;
                    OnPropertyChanged("FormatOrientation");
                }
            }
        }
        private byte _formatOrientation;
    
        [DataMember]
        public byte MaxLength
        {
            get { return _maxLength; }
            set
            {
                if (_maxLength != value)
                {
                    _maxLength = value;
                    OnPropertyChanged("MaxLength");
                }
            }
        }
        private byte _maxLength;
    
        [DataMember]
        public string TypeMessage
        {
            get { return _typeMessage; }
            set
            {
                if (_typeMessage != value)
                {
                    _typeMessage = value;
                    OnPropertyChanged("TypeMessage");
                }
            }
        }
        private string _typeMessage;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Parametros Parametros
        {
            get { return _parametros; }
            set
            {
                if (!ReferenceEquals(_parametros, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (IdParametro != value.IdParametro)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _parametros;
                    _parametros = value;
                    FixupParametros(previousValue);
                    OnNavigationPropertyChanged("Parametros");
                }
            }
        }
        private Parametros _parametros;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Parametros = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupParametros(Parametros previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FormatosIndice.Contains(this))
            {
                previousValue.FormatosIndice.Remove(this);
            }
    
            if (Parametros != null)
            {
                if (!Parametros.FormatosIndice.Contains(this))
                {
                    Parametros.FormatosIndice.Add(this);
                }
    
                IdParametro = Parametros.IdParametro;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Parametros")
                    && (ChangeTracker.OriginalValues["Parametros"] == Parametros))
                {
                    ChangeTracker.OriginalValues.Remove("Parametros");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Parametros", previousValue);
                }
                if (Parametros != null && !Parametros.ChangeTracker.ChangeTrackingEnabled)
                {
                    Parametros.StartTracking();
                }
            }
        }

        #endregion
    }
}
