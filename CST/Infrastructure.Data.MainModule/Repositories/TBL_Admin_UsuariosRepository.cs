//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using System;
using System.Globalization;
using System.Linq;
using Domain.Core.Specification;
using Domain.MainModule.Contracts;
using Domain.MainModules.Entities;
using Infraestructure.Data.Core;
using Infraestructure.Data.Core.Extensions;
using Infrastructure.CrossCutting.Logging;
using Infrastructure.Data.MainModule.Resources;
using Infrastructure.Data.MainModule.UnitOfWork;
using System.Collections.Generic;

namespace Infrastructure.Data.MainModule.Repositories
{
    public class TBL_Admin_UsuariosRepository : GenericRepository<TBL_Admin_Usuarios>, ITBL_Admin_UsuariosRepository
    {
        IMainModuleUnitOfWork _currentUnitOfWork;

        public TBL_Admin_UsuariosRepository(IMainModuleUnitOfWork unitOfWork, ITraceManager traceManager)
            : base(unitOfWork, traceManager)
        {
            _currentUnitOfWork = unitOfWork;
        }

        public TBL_Admin_Usuarios RetornarUsuarioConRoles(ISpecification<TBL_Admin_Usuarios> specification)
        {
            //validate specification
            if (specification == null)
                throw new ArgumentNullException("specification");

            var activeContext = UnitOfWork as IMainModuleUnitOfWork;
            if (activeContext != null)
            {

                //perform operation in this repository
                var specific = specification.SatisfiedBy();
                return activeContext.TBL_Admin_Usuarios
                                    .Include(r => r.TBL_Admin_Roles)
                                    .Where(specific)
                                    .SingleOrDefault();
            }
            throw new InvalidOperationException(string.Format(
                CultureInfo.InvariantCulture,
                Messages.exception_InvalidStoreContext,
                GetType().Name));
        }

        public List<TBL_Admin_Usuarios> RetornarUsuariosConRoles(ISpecification<TBL_Admin_Usuarios> specification)
        {
            //validate specification
            if (specification == null)
                throw new ArgumentNullException("specification");

            var activeContext = UnitOfWork as IMainModuleUnitOfWork;
            if (activeContext != null)
            {

                //perform operation in this repository
                var specific = specification.SatisfiedBy();
                return activeContext.TBL_Admin_Usuarios
                                    .Include(r => r.TBL_Admin_Roles)
                                    .Where(specific)
                                    .ToList();
            }
            throw new InvalidOperationException(string.Format(
                CultureInfo.InvariantCulture,
                Messages.exception_InvalidStoreContext,
                GetType().Name));
        }


        public TBL_Admin_Usuarios RetornarUsuarioReponsableAprobacion(string role)
        {
            var actualContext = UnitOfWork as IMainModuleUnitOfWork;
            if (actualContext != null)
            {
                return (from user
                            in actualContext.TBL_Admin_Usuarios
                        where
                            user.TBL_Admin_Roles.Any(x => x.NombreRol == role)
                        select
                            user).SingleOrDefault();
            }

            throw new InvalidOperationException(string.Format(
                CultureInfo.InvariantCulture,
                Messages.exception_InvalidStoreContext,
                GetType().Name));
        }

        public TBL_Admin_Usuarios GetUsuarioById(int id)
        {
            if (id > 0)
            {
                var set = _currentUnitOfWork.CreateSet<TBL_Admin_Usuarios>();

                return set.Where(c => c.IdUser == id)
                          .Select(c => c)
                          .SingleOrDefault();
            }
            return null;
        }

        public TBL_Admin_Usuarios GetUsuarioByName(string name)
        {
            if (!string.IsNullOrEmpty(name))
            {
                var set = _currentUnitOfWork.CreateSet<TBL_Admin_Usuarios>();

                return set.Where(c => c.Nombres.Equals(name))
                          .Select(c => c)
                          .SingleOrDefault();
            }
            return null;
        }  
        
    }
}