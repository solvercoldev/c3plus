//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

using Domain.Core.Entities;

namespace Domain.MainModules.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AlarmasCompromiso))]
    [KnownType(typeof(Campos))]
    [KnownType(typeof(Compromisos))]
    [KnownType(typeof(Fases))]
    [KnownType(typeof(Pozos))]
    [KnownType(typeof(TBL_Admin_Usuarios))]
    [KnownType(typeof(EntregablesANHCompromiso))]
    [KnownType(typeof(PagosObligaciones))]
    
    public partial class Compromisos: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long IdFase
        {
            get { return _idFase; }
            set
            {
                if (_idFase != value)
                {
                    ChangeTracker.RecordOriginalValue("IdFase", _idFase);
                    if (!IsDeserializing)
                    {
                        if (Fases != null && Fases.IdFase != value)
                        {
                            Fases = null;
                        }
                    }
                    _idFase = value;
                    OnPropertyChanged("IdFase");
                }
            }
        }
        private long _idFase;
    
        [DataMember]
        public long IdCompromiso
        {
            get { return _idCompromiso; }
            set
            {
                if (_idCompromiso != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdCompromiso' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _idCompromiso = value;
                    OnPropertyChanged("IdCompromiso");
                }
            }
        }
        private long _idCompromiso;
    
        [DataMember]
        public string TipoCompromiso
        {
            get { return _tipoCompromiso; }
            set
            {
                if (_tipoCompromiso != value)
                {
                    _tipoCompromiso = value;
                    OnPropertyChanged("TipoCompromiso");
                }
            }
        }
        private string _tipoCompromiso;
    
        [DataMember]
        public string Nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("Nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public string Descripcion
        {
            get { return _descripcion; }
            set
            {
                if (_descripcion != value)
                {
                    _descripcion = value;
                    OnPropertyChanged("Descripcion");
                }
            }
        }
        private string _descripcion;
    
        [DataMember]
        public string Importancia
        {
            get { return _importancia; }
            set
            {
                if (_importancia != value)
                {
                    _importancia = value;
                    OnPropertyChanged("Importancia");
                }
            }
        }
        private string _importancia;
    
        [DataMember]
        public Nullable<System.DateTime> FechaCumplimiento
        {
            get { return _fechaCumplimiento; }
            set
            {
                if (_fechaCumplimiento != value)
                {
                    _fechaCumplimiento = value;
                    OnPropertyChanged("FechaCumplimiento");
                }
            }
        }
        private Nullable<System.DateTime> _fechaCumplimiento;
    
        [DataMember]
        public Nullable<long> IdCompromisoPadre
        {
            get { return _idCompromisoPadre; }
            set
            {
                if (_idCompromisoPadre != value)
                {
                    ChangeTracker.RecordOriginalValue("IdCompromisoPadre", _idCompromisoPadre);
                    if (!IsDeserializing)
                    {
                        if (Compromisos2 != null && Compromisos2.IdCompromiso != value)
                        {
                            Compromisos2 = null;
                        }
                    }
                    _idCompromisoPadre = value;
                    OnPropertyChanged("IdCompromisoPadre");
                }
            }
        }
        private Nullable<long> _idCompromisoPadre;
    
        [DataMember]
        public string Estado
        {
            get { return _estado; }
            set
            {
                if (_estado != value)
                {
                    _estado = value;
                    OnPropertyChanged("Estado");
                }
            }
        }
        private string _estado;
    
        [DataMember]
        public string IdCampo
        {
            get { return _idCampo; }
            set
            {
                if (_idCampo != value)
                {
                    ChangeTracker.RecordOriginalValue("IdCampo", _idCampo);
                    if (!IsDeserializing)
                    {
                        if (Campos != null && Campos.IdCampo != value)
                        {
                            Campos = null;
                        }
                    }
                    _idCampo = value;
                    OnPropertyChanged("IdCampo");
                }
            }
        }
        private string _idCampo;
    
        [DataMember]
        public string IdPozo
        {
            get { return _idPozo; }
            set
            {
                if (_idPozo != value)
                {
                    ChangeTracker.RecordOriginalValue("IdPozo", _idPozo);
                    if (!IsDeserializing)
                    {
                        if (Pozos != null && Pozos.IdPozo != value)
                        {
                            Pozos = null;
                        }
                    }
                    _idPozo = value;
                    OnPropertyChanged("IdPozo");
                }
            }
        }
        private string _idPozo;
    
        [DataMember]
        public string IdMinuta
        {
            get { return _idMinuta; }
            set
            {
                if (_idMinuta != value)
                {
                    _idMinuta = value;
                    OnPropertyChanged("IdMinuta");
                }
            }
        }
        private string _idMinuta;
    
        [DataMember]
        public string NombreResponsable
        {
            get { return _nombreResponsable; }
            set
            {
                if (_nombreResponsable != value)
                {
                    _nombreResponsable = value;
                    OnPropertyChanged("NombreResponsable");
                }
            }
        }
        private string _nombreResponsable;
    
        [DataMember]
        public string TipoAsociacion
        {
            get { return _tipoAsociacion; }
            set
            {
                if (_tipoAsociacion != value)
                {
                    _tipoAsociacion = value;
                    OnPropertyChanged("TipoAsociacion");
                }
            }
        }
        private string _tipoAsociacion;
    
        [DataMember]
        public int DiasAlarma
        {
            get { return _diasAlarma; }
            set
            {
                if (_diasAlarma != value)
                {
                    _diasAlarma = value;
                    OnPropertyChanged("DiasAlarma");
                }
            }
        }
        private int _diasAlarma;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public int CreateBy
        {
            get { return _createBy; }
            set
            {
                if (_createBy != value)
                {
                    ChangeTracker.RecordOriginalValue("CreateBy", _createBy);
                    if (!IsDeserializing)
                    {
                        if (TBL_Admin_Usuarios != null && TBL_Admin_Usuarios.IdUser != value)
                        {
                            TBL_Admin_Usuarios = null;
                        }
                    }
                    _createBy = value;
                    OnPropertyChanged("CreateBy");
                }
            }
        }
        private int _createBy;
    
        [DataMember]
        public System.DateTime CreateOn
        {
            get { return _createOn; }
            set
            {
                if (_createOn != value)
                {
                    _createOn = value;
                    OnPropertyChanged("CreateOn");
                }
            }
        }
        private System.DateTime _createOn;
    
        [DataMember]
        public int ModifiedBy
        {
            get { return _modifiedBy; }
            set
            {
                if (_modifiedBy != value)
                {
                    ChangeTracker.RecordOriginalValue("ModifiedBy", _modifiedBy);
                    if (!IsDeserializing)
                    {
                        if (TBL_Admin_Usuarios1 != null && TBL_Admin_Usuarios1.IdUser != value)
                        {
                            TBL_Admin_Usuarios1 = null;
                        }
                    }
                    _modifiedBy = value;
                    OnPropertyChanged("ModifiedBy");
                }
            }
        }
        private int _modifiedBy;
    
        [DataMember]
        public System.DateTime ModifiedOn
        {
            get { return _modifiedOn; }
            set
            {
                if (_modifiedOn != value)
                {
                    _modifiedOn = value;
                    OnPropertyChanged("ModifiedOn");
                }
            }
        }
        private System.DateTime _modifiedOn;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<AlarmasCompromiso> AlarmasCompromiso
        {
            get
            {
                if (_alarmasCompromiso == null)
                {
                    _alarmasCompromiso = new TrackableCollection<AlarmasCompromiso>();
                    _alarmasCompromiso.CollectionChanged += FixupAlarmasCompromiso;
                }
                return _alarmasCompromiso;
            }
            set
            {
                if (!ReferenceEquals(_alarmasCompromiso, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_alarmasCompromiso != null)
                    {
                        _alarmasCompromiso.CollectionChanged -= FixupAlarmasCompromiso;
                    }
                    _alarmasCompromiso = value;
                    if (_alarmasCompromiso != null)
                    {
                        _alarmasCompromiso.CollectionChanged += FixupAlarmasCompromiso;
                    }
                    OnNavigationPropertyChanged("AlarmasCompromiso");
                }
            }
        }
        private TrackableCollection<AlarmasCompromiso> _alarmasCompromiso;
    
        [DataMember]
        public Campos Campos
        {
            get { return _campos; }
            set
            {
                if (!ReferenceEquals(_campos, value))
                {
                    var previousValue = _campos;
                    _campos = value;
                    FixupCampos(previousValue);
                    OnNavigationPropertyChanged("Campos");
                }
            }
        }
        private Campos _campos;
    
        [DataMember]
        public TrackableCollection<Compromisos> Compromisos1
        {
            get
            {
                if (_compromisos1 == null)
                {
                    _compromisos1 = new TrackableCollection<Compromisos>();
                    _compromisos1.CollectionChanged += FixupCompromisos1;
                }
                return _compromisos1;
            }
            set
            {
                if (!ReferenceEquals(_compromisos1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_compromisos1 != null)
                    {
                        _compromisos1.CollectionChanged -= FixupCompromisos1;
                    }
                    _compromisos1 = value;
                    if (_compromisos1 != null)
                    {
                        _compromisos1.CollectionChanged += FixupCompromisos1;
                    }
                    OnNavigationPropertyChanged("Compromisos1");
                }
            }
        }
        private TrackableCollection<Compromisos> _compromisos1;
    
        [DataMember]
        public Compromisos Compromisos2
        {
            get { return _compromisos2; }
            set
            {
                if (!ReferenceEquals(_compromisos2, value))
                {
                    var previousValue = _compromisos2;
                    _compromisos2 = value;
                    FixupCompromisos2(previousValue);
                    OnNavigationPropertyChanged("Compromisos2");
                }
            }
        }
        private Compromisos _compromisos2;
    
        [DataMember]
        public Fases Fases
        {
            get { return _fases; }
            set
            {
                if (!ReferenceEquals(_fases, value))
                {
                    var previousValue = _fases;
                    _fases = value;
                    FixupFases(previousValue);
                    OnNavigationPropertyChanged("Fases");
                }
            }
        }
        private Fases _fases;
    
        [DataMember]
        public Pozos Pozos
        {
            get { return _pozos; }
            set
            {
                if (!ReferenceEquals(_pozos, value))
                {
                    var previousValue = _pozos;
                    _pozos = value;
                    FixupPozos(previousValue);
                    OnNavigationPropertyChanged("Pozos");
                }
            }
        }
        private Pozos _pozos;
    
        [DataMember]
        public TBL_Admin_Usuarios TBL_Admin_Usuarios
        {
            get { return _tBL_Admin_Usuarios; }
            set
            {
                if (!ReferenceEquals(_tBL_Admin_Usuarios, value))
                {
                    var previousValue = _tBL_Admin_Usuarios;
                    _tBL_Admin_Usuarios = value;
                    FixupTBL_Admin_Usuarios(previousValue);
                    OnNavigationPropertyChanged("TBL_Admin_Usuarios");
                }
            }
        }
        private TBL_Admin_Usuarios _tBL_Admin_Usuarios;
    
        [DataMember]
        public TBL_Admin_Usuarios TBL_Admin_Usuarios1
        {
            get { return _tBL_Admin_Usuarios1; }
            set
            {
                if (!ReferenceEquals(_tBL_Admin_Usuarios1, value))
                {
                    var previousValue = _tBL_Admin_Usuarios1;
                    _tBL_Admin_Usuarios1 = value;
                    FixupTBL_Admin_Usuarios1(previousValue);
                    OnNavigationPropertyChanged("TBL_Admin_Usuarios1");
                }
            }
        }
        private TBL_Admin_Usuarios _tBL_Admin_Usuarios1;
    
        [DataMember]
        public TrackableCollection<EntregablesANHCompromiso> EntregablesANHCompromiso
        {
            get
            {
                if (_entregablesANHCompromiso == null)
                {
                    _entregablesANHCompromiso = new TrackableCollection<EntregablesANHCompromiso>();
                    _entregablesANHCompromiso.CollectionChanged += FixupEntregablesANHCompromiso;
                }
                return _entregablesANHCompromiso;
            }
            set
            {
                if (!ReferenceEquals(_entregablesANHCompromiso, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_entregablesANHCompromiso != null)
                    {
                        _entregablesANHCompromiso.CollectionChanged -= FixupEntregablesANHCompromiso;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (EntregablesANHCompromiso item in _entregablesANHCompromiso)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _entregablesANHCompromiso = value;
                    if (_entregablesANHCompromiso != null)
                    {
                        _entregablesANHCompromiso.CollectionChanged += FixupEntregablesANHCompromiso;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (EntregablesANHCompromiso item in _entregablesANHCompromiso)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("EntregablesANHCompromiso");
                }
            }
        }
        private TrackableCollection<EntregablesANHCompromiso> _entregablesANHCompromiso;
    
        [DataMember]
        public TrackableCollection<PagosObligaciones> PagosObligaciones
        {
            get
            {
                if (_pagosObligaciones == null)
                {
                    _pagosObligaciones = new TrackableCollection<PagosObligaciones>();
                    _pagosObligaciones.CollectionChanged += FixupPagosObligaciones;
                }
                return _pagosObligaciones;
            }
            set
            {
                if (!ReferenceEquals(_pagosObligaciones, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pagosObligaciones != null)
                    {
                        _pagosObligaciones.CollectionChanged -= FixupPagosObligaciones;
                    }
                    _pagosObligaciones = value;
                    if (_pagosObligaciones != null)
                    {
                        _pagosObligaciones.CollectionChanged += FixupPagosObligaciones;
                    }
                    OnNavigationPropertyChanged("PagosObligaciones");
                }
            }
        }
        private TrackableCollection<PagosObligaciones> _pagosObligaciones;
    
        [DataMember]
        public TrackableCollection<TBL_Admin_Usuarios> TBL_Admin_Usuarios2
        {
            get
            {
                if (_tBL_Admin_Usuarios2 == null)
                {
                    _tBL_Admin_Usuarios2 = new TrackableCollection<TBL_Admin_Usuarios>();
                    _tBL_Admin_Usuarios2.CollectionChanged += FixupTBL_Admin_Usuarios2;
                }
                return _tBL_Admin_Usuarios2;
            }
            set
            {
                if (!ReferenceEquals(_tBL_Admin_Usuarios2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tBL_Admin_Usuarios2 != null)
                    {
                        _tBL_Admin_Usuarios2.CollectionChanged -= FixupTBL_Admin_Usuarios2;
                    }
                    _tBL_Admin_Usuarios2 = value;
                    if (_tBL_Admin_Usuarios2 != null)
                    {
                        _tBL_Admin_Usuarios2.CollectionChanged += FixupTBL_Admin_Usuarios2;
                    }
                    OnNavigationPropertyChanged("TBL_Admin_Usuarios2");
                }
            }
        }
        private TrackableCollection<TBL_Admin_Usuarios> _tBL_Admin_Usuarios2;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AlarmasCompromiso.Clear();
            Campos = null;
            Compromisos1.Clear();
            Compromisos2 = null;
            Fases = null;
            Pozos = null;
            TBL_Admin_Usuarios = null;
            TBL_Admin_Usuarios1 = null;
            EntregablesANHCompromiso.Clear();
            PagosObligaciones.Clear();
            TBL_Admin_Usuarios2.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupCampos(Campos previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Compromisos.Contains(this))
            {
                previousValue.Compromisos.Remove(this);
            }
    
            if (Campos != null)
            {
                if (!Campos.Compromisos.Contains(this))
                {
                    Campos.Compromisos.Add(this);
                }
    
                IdCampo = Campos.IdCampo;
            }
            else if (!skipKeys)
            {
                IdCampo = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Campos")
                    && (ChangeTracker.OriginalValues["Campos"] == Campos))
                {
                    ChangeTracker.OriginalValues.Remove("Campos");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Campos", previousValue);
                }
                if (Campos != null && !Campos.ChangeTracker.ChangeTrackingEnabled)
                {
                    Campos.StartTracking();
                }
            }
        }
    
        private void FixupCompromisos2(Compromisos previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Compromisos1.Contains(this))
            {
                previousValue.Compromisos1.Remove(this);
            }
    
            if (Compromisos2 != null)
            {
                if (!Compromisos2.Compromisos1.Contains(this))
                {
                    Compromisos2.Compromisos1.Add(this);
                }
    
                IdCompromisoPadre = Compromisos2.IdCompromiso;
            }
            else if (!skipKeys)
            {
                IdCompromisoPadre = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Compromisos2")
                    && (ChangeTracker.OriginalValues["Compromisos2"] == Compromisos2))
                {
                    ChangeTracker.OriginalValues.Remove("Compromisos2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Compromisos2", previousValue);
                }
                if (Compromisos2 != null && !Compromisos2.ChangeTracker.ChangeTrackingEnabled)
                {
                    Compromisos2.StartTracking();
                }
            }
        }
    
        private void FixupFases(Fases previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Compromisos.Contains(this))
            {
                previousValue.Compromisos.Remove(this);
            }
    
            if (Fases != null)
            {
                if (!Fases.Compromisos.Contains(this))
                {
                    Fases.Compromisos.Add(this);
                }
    
                IdFase = Fases.IdFase;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Fases")
                    && (ChangeTracker.OriginalValues["Fases"] == Fases))
                {
                    ChangeTracker.OriginalValues.Remove("Fases");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Fases", previousValue);
                }
                if (Fases != null && !Fases.ChangeTracker.ChangeTrackingEnabled)
                {
                    Fases.StartTracking();
                }
            }
        }
    
        private void FixupPozos(Pozos previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Compromisos.Contains(this))
            {
                previousValue.Compromisos.Remove(this);
            }
    
            if (Pozos != null)
            {
                if (!Pozos.Compromisos.Contains(this))
                {
                    Pozos.Compromisos.Add(this);
                }
    
                IdPozo = Pozos.IdPozo;
            }
            else if (!skipKeys)
            {
                IdPozo = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Pozos")
                    && (ChangeTracker.OriginalValues["Pozos"] == Pozos))
                {
                    ChangeTracker.OriginalValues.Remove("Pozos");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Pozos", previousValue);
                }
                if (Pozos != null && !Pozos.ChangeTracker.ChangeTrackingEnabled)
                {
                    Pozos.StartTracking();
                }
            }
        }
    
        private void FixupTBL_Admin_Usuarios(TBL_Admin_Usuarios previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Compromisos.Contains(this))
            {
                previousValue.Compromisos.Remove(this);
            }
    
            if (TBL_Admin_Usuarios != null)
            {
                if (!TBL_Admin_Usuarios.Compromisos.Contains(this))
                {
                    TBL_Admin_Usuarios.Compromisos.Add(this);
                }
    
                CreateBy = TBL_Admin_Usuarios.IdUser;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TBL_Admin_Usuarios")
                    && (ChangeTracker.OriginalValues["TBL_Admin_Usuarios"] == TBL_Admin_Usuarios))
                {
                    ChangeTracker.OriginalValues.Remove("TBL_Admin_Usuarios");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TBL_Admin_Usuarios", previousValue);
                }
                if (TBL_Admin_Usuarios != null && !TBL_Admin_Usuarios.ChangeTracker.ChangeTrackingEnabled)
                {
                    TBL_Admin_Usuarios.StartTracking();
                }
            }
        }
    
        private void FixupTBL_Admin_Usuarios1(TBL_Admin_Usuarios previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Compromisos1.Contains(this))
            {
                previousValue.Compromisos1.Remove(this);
            }
    
            if (TBL_Admin_Usuarios1 != null)
            {
                if (!TBL_Admin_Usuarios1.Compromisos1.Contains(this))
                {
                    TBL_Admin_Usuarios1.Compromisos1.Add(this);
                }
    
                ModifiedBy = TBL_Admin_Usuarios1.IdUser;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TBL_Admin_Usuarios1")
                    && (ChangeTracker.OriginalValues["TBL_Admin_Usuarios1"] == TBL_Admin_Usuarios1))
                {
                    ChangeTracker.OriginalValues.Remove("TBL_Admin_Usuarios1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TBL_Admin_Usuarios1", previousValue);
                }
                if (TBL_Admin_Usuarios1 != null && !TBL_Admin_Usuarios1.ChangeTracker.ChangeTrackingEnabled)
                {
                    TBL_Admin_Usuarios1.StartTracking();
                }
            }
        }
    
        private void FixupAlarmasCompromiso(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AlarmasCompromiso item in e.NewItems)
                {
                    item.Compromisos = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AlarmasCompromiso", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AlarmasCompromiso item in e.OldItems)
                {
                    if (ReferenceEquals(item.Compromisos, this))
                    {
                        item.Compromisos = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AlarmasCompromiso", item);
                    }
                }
            }
        }
    
        private void FixupCompromisos1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Compromisos item in e.NewItems)
                {
                    item.Compromisos2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Compromisos1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Compromisos item in e.OldItems)
                {
                    if (ReferenceEquals(item.Compromisos2, this))
                    {
                        item.Compromisos2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Compromisos1", item);
                    }
                }
            }
        }
    
        private void FixupEntregablesANHCompromiso(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (EntregablesANHCompromiso item in e.NewItems)
                {
                    item.Compromisos = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("EntregablesANHCompromiso", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EntregablesANHCompromiso item in e.OldItems)
                {
                    if (ReferenceEquals(item.Compromisos, this))
                    {
                        item.Compromisos = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("EntregablesANHCompromiso", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupPagosObligaciones(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PagosObligaciones item in e.NewItems)
                {
                    item.Compromisos = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PagosObligaciones", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PagosObligaciones item in e.OldItems)
                {
                    if (ReferenceEquals(item.Compromisos, this))
                    {
                        item.Compromisos = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PagosObligaciones", item);
                    }
                }
            }
        }
    
        private void FixupTBL_Admin_Usuarios2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TBL_Admin_Usuarios item in e.NewItems)
                {
                    if (!item.Compromisos2.Contains(this))
                    {
                        item.Compromisos2.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TBL_Admin_Usuarios2", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TBL_Admin_Usuarios item in e.OldItems)
                {
                    if (item.Compromisos2.Contains(this))
                    {
                        item.Compromisos2.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TBL_Admin_Usuarios2", item);
                    }
                }
            }
        }

        #endregion
    }
}
