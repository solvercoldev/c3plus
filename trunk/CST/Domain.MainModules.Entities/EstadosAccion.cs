//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

using Domain.Core.Entities;

namespace Domain.MainModules.Entities
{
    [DataContract(IsReference = true)]
    
    public partial class EstadosAccion: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string Estado
        {
            get { return _estado; }
            set
            {
                if (_estado != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Estado' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _estado = value;
                    OnPropertyChanged("Estado");
                }
            }
        }
        private string _estado;
    
        [DataMember]
        public bool Suspender
        {
            get { return _suspender; }
            set
            {
                if (_suspender != value)
                {
                    _suspender = value;
                    OnPropertyChanged("Suspender");
                }
            }
        }
        private bool _suspender;
    
        [DataMember]
        public bool Restituir
        {
            get { return _restituir; }
            set
            {
                if (_restituir != value)
                {
                    _restituir = value;
                    OnPropertyChanged("Restituir");
                }
            }
        }
        private bool _restituir;
    
        [DataMember]
        public bool Renunciar
        {
            get { return _renunciar; }
            set
            {
                if (_renunciar != value)
                {
                    _renunciar = value;
                    OnPropertyChanged("Renunciar");
                }
            }
        }
        private bool _renunciar;
    
        [DataMember]
        public bool Terminar
        {
            get { return _terminar; }
            set
            {
                if (_terminar != value)
                {
                    _terminar = value;
                    OnPropertyChanged("Terminar");
                }
            }
        }
        private bool _terminar;
    
        [DataMember]
        public bool CrearDocumento
        {
            get { return _crearDocumento; }
            set
            {
                if (_crearDocumento != value)
                {
                    _crearDocumento = value;
                    OnPropertyChanged("CrearDocumento");
                }
            }
        }
        private bool _crearDocumento;
    
        [DataMember]
        public bool CrearCompromiso
        {
            get { return _crearCompromiso; }
            set
            {
                if (_crearCompromiso != value)
                {
                    _crearCompromiso = value;
                    OnPropertyChanged("CrearCompromiso");
                }
            }
        }
        private bool _crearCompromiso;
    
        [DataMember]
        public bool TrabajarFases
        {
            get { return _trabajarFases; }
            set
            {
                if (_trabajarFases != value)
                {
                    _trabajarFases = value;
                    OnPropertyChanged("TrabajarFases");
                }
            }
        }
        private bool _trabajarFases;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
