//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

using Domain.Core.Entities;

namespace Domain.MainModules.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Compromisos))]
    
    public partial class AlarmasCompromiso: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long IdAlarmaCompromiso
        {
            get { return _idAlarmaCompromiso; }
            set
            {
                if (_idAlarmaCompromiso != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdAlarmaCompromiso' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _idAlarmaCompromiso = value;
                    OnPropertyChanged("IdAlarmaCompromiso");
                }
            }
        }
        private long _idAlarmaCompromiso;
    
        [DataMember]
        public long IdCompromiso
        {
            get { return _idCompromiso; }
            set
            {
                if (_idCompromiso != value)
                {
                    ChangeTracker.RecordOriginalValue("IdCompromiso", _idCompromiso);
                    if (!IsDeserializing)
                    {
                        if (Compromisos != null && Compromisos.IdCompromiso != value)
                        {
                            Compromisos = null;
                        }
                    }
                    _idCompromiso = value;
                    OnPropertyChanged("IdCompromiso");
                }
            }
        }
        private long _idCompromiso;
    
        [DataMember]
        public short DiasInicioAlarma
        {
            get { return _diasInicioAlarma; }
            set
            {
                if (_diasInicioAlarma != value)
                {
                    _diasInicioAlarma = value;
                    OnPropertyChanged("DiasInicioAlarma");
                }
            }
        }
        private short _diasInicioAlarma;
    
        [DataMember]
        public byte DiasAlarma
        {
            get { return _diasAlarma; }
            set
            {
                if (_diasAlarma != value)
                {
                    _diasAlarma = value;
                    OnPropertyChanged("DiasAlarma");
                }
            }
        }
        private byte _diasAlarma;
    
        [DataMember]
        public byte Importancia
        {
            get { return _importancia; }
            set
            {
                if (_importancia != value)
                {
                    _importancia = value;
                    OnPropertyChanged("Importancia");
                }
            }
        }
        private byte _importancia;
    
        [DataMember]
        public bool Activa
        {
            get { return _activa; }
            set
            {
                if (_activa != value)
                {
                    _activa = value;
                    OnPropertyChanged("Activa");
                }
            }
        }
        private bool _activa;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Compromisos Compromisos
        {
            get { return _compromisos; }
            set
            {
                if (!ReferenceEquals(_compromisos, value))
                {
                    var previousValue = _compromisos;
                    _compromisos = value;
                    FixupCompromisos(previousValue);
                    OnNavigationPropertyChanged("Compromisos");
                }
            }
        }
        private Compromisos _compromisos;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Compromisos = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCompromisos(Compromisos previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AlarmasCompromiso.Contains(this))
            {
                previousValue.AlarmasCompromiso.Remove(this);
            }
    
            if (Compromisos != null)
            {
                if (!Compromisos.AlarmasCompromiso.Contains(this))
                {
                    Compromisos.AlarmasCompromiso.Add(this);
                }
    
                IdCompromiso = Compromisos.IdCompromiso;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Compromisos")
                    && (ChangeTracker.OriginalValues["Compromisos"] == Compromisos))
                {
                    ChangeTracker.OriginalValues.Remove("Compromisos");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Compromisos", previousValue);
                }
                if (Compromisos != null && !Compromisos.ChangeTracker.ChangeTrackingEnabled)
                {
                    Compromisos.StartTracking();
                }
            }
        }

        #endregion
    }
}
